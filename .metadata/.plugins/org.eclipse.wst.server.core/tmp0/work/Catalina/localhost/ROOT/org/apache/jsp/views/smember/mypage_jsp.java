/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.46
 * Generated at: 2019-09-27 03:13:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.smember;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.kh.member.model.vo.Member;

public final class mypage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.kh.member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");

    	Member m = (Member)session.getAttribute("member");
    
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>마이페이지</h1><hr>\r\n");
      out.write("\t<form action=\"/views/smember/updateMember.jsp\">\r\n");
      out.write("\t<h3>아이디 : <input type=\"text\" name=\"id\" value=\"");
      out.print(m.getMemberId() );
      out.write("\" readonly></h3>\t<!-- 읽기 전용 -->\r\n");
      out.write("\t<h3>비밀번호 : <input type=\"text\" name=\"pw\" value=\"");
      out.print(m.getMemberPw() );
      out.write("\"></h3>\r\n");
      out.write("\t<h3>이름 : <input type=\"text\" name=\"name\" value=\"");
      out.print(m.getMemberName() );
      out.write("\"></h3>\r\n");
      out.write("\t<h3>이메일 : <input type=\"text\" name=\"email\" value=\"");
      out.print(m.getEmail() );
      out.write("\"></h3>\r\n");
      out.write("\t<h3>나이 : <input type=\"text\" name=\"age\" value=\"");
      out.print(m.getAge() );
      out.write("\"></h3>\r\n");
      out.write("\t<h3>주소 : <input type=\"text\" name=\"addr\" value=\"");
      out.print(m.getAddr() );
      out.write("\"></h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<h3>성별 : \r\n");
      out.write("\t\r\n");
      out.write("\t\t<!-- value 속성에 꼭 값을 넣어야 값이 넘어간다. 옆에 text는 text일뿐이라서 -->\r\n");
      out.write("\t\t<!-- name 속성에 같은 값을 넣어야 하나만 체크됨 -->\r\n");
      out.write("\t\t<input type=\"radio\" name=\"gender\" value=\"여\" ");
if(m.getGender().equals("여")){ 
      out.write(" checked=\"checked\" ");
} 
      out.write(">여자 \r\n");
      out.write("        <input type=\"radio\" name=\"gender\" value=\"남\" ");
if(m.getGender().equals("남")){ 
      out.write(" checked=\"checked\" ");
} 
      out.write(">남자\r\n");
      out.write("        \r\n");
      out.write("        <br>\r\n");
      out.write("        \r\n");
      out.write("        <select name=\"gender\">\r\n");
      out.write("        \t<option value=\"남\" ");
if(m.getGender().equals("남")){ 
      out.write(" selected=\"selected\" ");
} 
      out.write(">남자\r\n");
      out.write("        \t<option value=\"여\" ");
if(m.getGender().equals("여")){ 
      out.write(" selected=\"selected\" ");
} 
      out.write(">여자\r\n");
      out.write("        </select>\r\n");
      out.write("    </h3>\r\n");
      out.write("    \r\n");
      out.write("    <button type=\"submit\">정보변경</button>\r\n");
      out.write("    <!-- button태그는 form내부에서 dafault로 submit으로 되기때문에 submit이 아니라면 꼭 button을 명시 -->\r\n");
      out.write("    \r\n");
      out.write("    <!-- 탈퇴 방법 1) 버튼을 이용한 get 방식의 탈퇴 -->\r\n");
      out.write("    <button type=\"button\" onclick=\"return deleteMember('");
      out.print(m.getMemberId());
      out.write("');\">회원탈퇴</button>\t\r\n");
      out.write("    \r\n");
      out.write("    <!-- 탈퇴 방법 2) a태그를 이용한 get 방식의 탈퇴 -->\r\n");
      out.write("    <a href=\"/views/smember/deleteMember.jsp?id=");
      out.print(m.getMemberId());
      out.write("\">회원탈퇴</a>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 탈퇴 방법 3) form을 이용한 post, hidden 방식 탈퇴 -->\r\n");
      out.write("\t<form action=\"/views/smember/deleteMember.jsp\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"id\" value=\"");
      out.print(m.getMemberId());
      out.write("\">\r\n");
      out.write("\t\t<button type=\"submit\">탈퇴하기</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tfunction deleteMember(id){\r\n");
      out.write("\t\t\tif(confirm(\"정말 탈퇴하시겠습니까?\")){\r\n");
      out.write("\t\t\t\tlocation.href = \"/views/smember/deleteMember.jsp?id=\"+id;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
